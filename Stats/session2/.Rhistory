}
# Various housekeeping things.
# make variable names syntactically valid.
session1 <- clean_names(session1)
# Select only columns we want.
session1 <- dplyr::filter(session1,session1$trial_number != "BEGIN TASK")
session1 <- dplyr::filter(session1,session1$trial_number != "END TASK")
session1 <- select(session1,participant_public_id,spreadsheet_name,spreadsheet_row,trial_number,
zone_type,reaction_time,response,attempt,correct,display,fname,branch_ee59,branch_52fz)
# Remove trials where stimulus failed to load.
session1 <- subset(session1,spreadsheet_name!="")
# Rename some variables (naming in Gorilla is opaque)
names(session1)[12] <- "Headphone.1"
names(session1)[13] <- "Headphone.2"
names(session1)[11] <- "stimulus"
names(session1)[10] <- "block"
names(session1)[1] <- "ID"
# Set vectors.
session1$spreadsheet_row <- as.numeric(session1$spreadsheet_row)
session1$trial_number <- as.numeric(session1$trial_number)
session1$reaction_time <- as.numeric(session1$reaction_time)
session1$correct <- as.numeric(session1$correct)
session1$order <- substr(session1$spreadsheet_name,1,4)
# Separate data by block.
PC.session1 <- subset(session1,grepl("PC",block))
LD.session1 <- subset(session1,grepl("LD",block))
# Session 2
# Set working directory.
setwd("/Volumes/netapp/MyersLab/Dave/SM18-Replication/Stats/session2")
# Read in files.
file_names <- list.files(path = ".", pattern = "*.csv", all.files = FALSE,
full.names = FALSE, recursive = FALSE)
# Create data frame.
session2 <- data.frame()
# Loop to create combined dataframe.
for (i in file_names) {
data <- fread(i, header = TRUE, sep = ",")
session2 <- rbind(session2, data)
}
# Various housekeeping things.
# Make variable names syntactically valid.
session2 <- clean_names(session2)
# Select only columns we want.
session2 <- dplyr::filter(session2,session2$trial_number != "BEGIN TASK")
session2 <- dplyr::filter(session2,session2$trial_number != "END TASK")
session2 <- select(session2,participant_public_id,spreadsheet_name,spreadsheet_row,trial_number,
zone_type,reaction_time,response,attempt,correct,display,fname,branch_ee59,branch_52fz)
# Remove trials where stimulus failed to load.
session2 <- subset(session2,spreadsheet_name!="")
# Rename some variables (naming in Gorilla is opaque)
names(session2)[12] <- "Headphone.1"
names(session2)[13] <- "Headphone.2"
names(session2)[11] <- "stimulus"
names(session2)[10] <- "block"
names(session2)[1] <- "ID"
# Set vectors.
session2$spreadsheet_row <- as.numeric(session2$spreadsheet_row)
session2$trial_number <- as.numeric(session2$trial_number)
session2$reaction_time <- as.numeric(session2$reaction_time)
session2$correct <- as.numeric(session2$correct)
session2$order <- substr(session2$spreadsheet_name,1,4)
# Separate data by block.
PC.session2 <- subset(session2,grepl("PC",block))
LD.session2 <- subset(session2,grepl("LD",block))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Combine data.
# First, assign session numbers to data frames.
PC.session1$session <- "Session 1"
PC.session2$session <- "Session 2"
# Combine data frames.
PC.both.complete <- rbind(PC.session1,PC.session2)
PC.both.complete <- PC.both.complete[PC.session1$ID %in% PC.session2$ID, ]
rm(data)
names(PC.both.complete)[10] <- "bias"
View(PC.both.complete)
PC.both.complete$bias <- ifelse(PC.both.complete$bias=="PC-S","S-Bias","SH-bias")
PC.session1$session <- "Session 1"
PC.session2$session <- "Session 2"
# Combine data frames.
PC.both.complete <- rbind(PC.session1,PC.session2)
PC.both.complete <- PC.both.complete[PC.session1$ID %in% PC.session2$ID, ]
# Rename "block" to bias for transparency.
names(PC.both.complete)[10] <- "bias"
View(PC.both.complete)
PC.both.complete$bias <- ifelse(PC.both.complete$bias=="PC-S","S-Bias",ifelse(PC.both.complete$bias=="PC-SH","SH-Bias",""))
n_distinct(PC.both.complete$ID)
PC.both.complete <- subset(PC.both.complete,zone_type=="response_keyboard_single") # drops 1 participant who never responded
n_distinct(PC.both.complete$ID)
PC.session1$session <- "Session 1"
PC.session2$session <- "Session 2"
# Combine data frames.
PC.both.complete <- rbind(PC.session1,PC.session2)
PC.both.complete <- PC.both.complete[PC.session1$ID %in% PC.session2$ID, ]
# Rename "block" to bias for transparency.
names(PC.both.complete)[10] <- "bias"
PC.both.complete$bias <- ifelse(PC.both.complete$bias=="PC-S","S-Bias",ifelse(PC.both.complete$bias=="PC-SH","SH-Bias",""))
PC.both.complete <- subset(PC.both.complete,zone_type=="response_keyboard_single") # drops 1 participant who never responded
n_distinct(PC.both.complete$ID)
View(PC.both.complete)
# First, assign session numbers to data frames.
PC.session1$session <- "Session 1"
PC.session2$session <- "Session 2"
# Combine data frames.
PC.both.complete <- rbind(PC.session1,PC.session2)
PC.both.complete <- PC.both.complete[PC.session1$ID %in% PC.session2$ID, ]
# Rename "block" to bias for transparency.
names(PC.both.complete)[10] <- "bias"
PC.both.complete$bias <- ifelse(PC.both.complete$bias=="PC-S","S-Bias",ifelse(PC.both.complete$bias=="PC-SH","SH-Bias",""))
View(PC.both.complete)
count(PC.both.complete$zone_type=="timelimit_screen")
PC.both.complete <- subset(PC.both.complete,zone_type=="response_keyboard_single")
PC.both.complete %>%
group_by(spreadsheet_name, Headphone.1, Headphone.2) %>%
summarise(Count = n_distinct(ID))
Counts <- PC.both.complete %>%
group_by(spreadsheet_name, Headphone.1, Headphone.2) %>%
summarise(Count = n_distinct(ID))
View(Counts)
PC.both.complete <- filter(PC.both.complete, Headphone.1 == "Pass" | Headphone.2 == "Pass")
PC.both.complete$ID <- factor(PC.both.complete$ID)
n_distinct(PC.both.complete$ID) # N=59
View(Counts)
PC.both.complete$resp1 <- ifelse(PC.both.complete$response=="sign",1,0)
# Add vector for continuum step.
PC.both.complete$step <- ifelse(PC.both.complete$stimulus=="TW001_20SS_80SH-001.mp3",1,
ifelse(PC.both.complete$stimulus=="TW002_30SS_70SH-001.mp3",2,
ifelse(PC.both.complete$stimulus=="TW003_40SS_60SH-001.mp3",3,
ifelse(PC.both.complete$stimulus=="TW004_50SS_50SH-001.mp3",4,
ifelse(PC.both.complete$stimulus=="TW005_60SS_40SH-001.mp3",5,
ifelse(PC.both.complete$stimulus=="TW006_70SS_30SH-001.mp3",6,
ifelse(PC.both.complete$stimulus=="TW007_80SS_20SH-001.mp3",7,NA)))))))
exclude <- subset(PC.both.complete, step==1 | step==7)
View(exclude)
exclude <- exclude %>%
group_by(ID,step) %>%
summarize(endpointResp=mean(resp1))
View(exclude)
exclude <- exclude %>%
group_by(ID,step) %>%
summarize(endpointResp=mean(resp1))
exclude <- subset(PC.both.complete, step==1 | step==7)
exclude <- exclude %>%
group_by(ID,step) %>%
summarize(endpointResp=mean(resp1))
View(exclude)
exclude <- subset(exclude,step==1&endpointResp>.2|step==7&endpointResp<.8)
View(exclude)
PC.both.complete <- PC.both.complete[ ! PC.both.complete$ID %in% exclude$ID, ]
n_distinct(PC.both.complete$ID) # N = 52
PC.session1 <- subset(PC.both.complete,session=="Session 1")
n_distinct(PC.session1$ID) # N = 52
n_distinct(PC.both.complete$ID) # N = 51
Counts <- PC.session1 %>%
group_by(ID) %>%
summarise(Count = length(ID))
View(Counts)
Counts <- PC.session1 %>%
group_by(order) %>%
summarise(Count = length(ID))
View(Counts)
Counts <- PC.session1 %>%
group_by(ID, stimulus) %>%
summarise(Count = length(ID))
View(Counts)
Counts <- PC.session1 %>%
group_by(ID, order, bias) %>%
summarise(Count = length(ID))
View(Counts)
PC.session1 %>%
group_by(order) %>%
summarise(Count = n_distinct(ID))
PC.session1.figure.stats <- Rmisc::summarySE(PC.session1, measurevar="resp1",groupvars = c("step","bias","order"))
ggplot(PC.session1.figure.stats, aes(x=as.numeric(step), y=resp1,color=as.factor(bias),linetype=as.factor(order))) +
geom_point(stat='summary', fun.y='mean', size=3,alpha=0.7) +
geom_line(stat='summary', fun.y='mean', size=1.25, alpha=0.7) +
geom_errorbar(aes(ymin=resp1-se,ymax=resp1+se),width=.3) +
scale_x_continuous('Continuum step', breaks=c(1:7)) +
scale_y_continuous('Percent "sign" responses', breaks=c(0,0.25,0.5,0.75,1), labels=c(0,25,50,75,100)) +
scale_color_manual('Biasing Condition', labels=c('S-bias','SH-Bias'),values=c("#B03A2E","#2874A6")) +
scale_linetype_manual('Order', labels=c('S-SH','SH-S'),values=c("solid","dotted")) +
coord_cartesian(ylim=c(0,1)) +
theme(text = element_text(size=20))
# Prep data for models.
PC.session1$ID <- as.factor(PC.session1$ID)
PC.session1$bias <- as.factor(PC.session1$bias)
PC.session1$step <- scale(PC.session1$step)
PC.session1$order <- as.factor(PC.session1$order)
contrasts(PC.session1$bias) = contr.sum(2)
contrasts(PC.session1$order) = contr.sum(2)
model1 <- mixed(resp1 ~ step*bias*order +
(bias*step||ID) + (bias||ID) + (step||ID), family=binomial(link="logit"),data=PC.session1,method="LRT",expand_re = TRUE,
control = glmerControl(optimizer="bobyqa",calc.derivs = FALSE, optCtrl = list(maxfun = 150000)))
model2 <- mixed(resp1 ~ step*bias*order +
(bias||ID) + (step||ID), family=binomial(link="logit"),data=PC.session1,method="LRT",expand_re = TRUE,
control = glmerControl(optimizer="bobyqa",calc.derivs = FALSE, optCtrl = list(maxfun = 150000)))
model3 <- mixed(resp1 ~ step*bias*order +
(bias||ID), family=binomial(link="logit"),data=PC.session1,method="LRT",expand_re = TRUE,
control = glmerControl(optimizer="bobyqa",calc.derivs = FALSE, optCtrl = list(maxfun = 150000)))
model4 <- mixed(resp1 ~ step*bias*order +
(1|ID), family=binomial(link="logit"),data=PC.session1,method="LRT",expand_re = TRUE,
control = glmerControl(optimizer="bobyqa",calc.derivs = FALSE, optCtrl = list(maxfun = 150000)))
anova(model1,model2,model3,model4)
summary(model2)
View(exclude)
BiasOrder <- interaction(PC.session1$bias,PC.session1$order)
m1 <- glmer(resp1 ~ BiasOrder + (1|ID),
data=PC.session1, family='binomial', control = glmerControl(optimizer="bobyqa", optCtrl = list(maxfun = 200000)))
posthoc <- multcomp::glht(m1, linfct=multcomp::mcp(BiasOrder="Tukey"))
summary(posthoc,test=multcomp::adjusted("bonferroni")) # Interaction occuring as a result of differences in biasing effect on SH-bias block across orders.
PC.session2 <- subset(PC.both.complete,session=="Session 2")
Counts <- PC.session2 %>%
group_by(ID) %>%
summarise(Count = length(ID))
View(Counts)
PC.session2 %>%
group_by(order) %>%
summarise(Count = n_distinct(ID))
View(PC.both.complete)
Counts <- PC.both.complete %>%
group_by(ID) %>%
summarise(Count = n_distinct(session))
View(Counts)
rm(list = ls(all = TRUE))
# Load packages.
# Data manipulation.
library(data.table)
library(dplyr)
library(stringr)
library(rio)
library(tidyverse)
library(janitor)
# Plots.
library(ggplot2)
library(cowplot)
# Analyses.
library(afex)
library(lme4)
library(lmerTest)
theme_set(theme_bw())
rm(list = ls(all = TRUE))
# Load packages.
# Data manipulation.
library(data.table)
library(dplyr)
library(stringr)
library(rio)
library(tidyverse)
library(janitor)
# Plots.
library(ggplot2)
library(cowplot)
# Analyses.
library(afex)
library(lme4)
library(lmerTest)
theme_set(theme_bw())
#### Import Data ####
# Session 1
# Set working directory.
setwd("/Volumes/netapp/MyersLab/Dave/SM18-Replication/Stats/session1")
# Read in files.
file_names <- list.files(path = ".", pattern = "*.csv", all.files = FALSE,
full.names = FALSE, recursive = FALSE)
# Create data frame.
session1 <- data.frame()
# Loop to create combined dataframe.
for (i in file_names) {
data <- fread(i, header = TRUE, sep = ",")
session1 <- rbind(session1, data)
}
# Various housekeeping things.
# make variable names syntactically valid.
session1 <- clean_names(session1)
# Select only columns we want.
session1 <- dplyr::filter(session1,session1$trial_number != "BEGIN TASK")
session1 <- dplyr::filter(session1,session1$trial_number != "END TASK")
session1 <- select(session1,participant_public_id,spreadsheet_name,spreadsheet_row,trial_number,
zone_type,reaction_time,response,attempt,correct,display,fname,branch_ee59,branch_52fz)
# Remove trials where stimulus failed to load.
session1 <- subset(session1,spreadsheet_name!="")
# Rename some variables (naming in Gorilla is opaque)
names(session1)[12] <- "Headphone.1"
names(session1)[13] <- "Headphone.2"
names(session1)[11] <- "stimulus"
names(session1)[10] <- "block"
names(session1)[1] <- "ID"
# Set vectors.
session1$spreadsheet_row <- as.numeric(session1$spreadsheet_row)
session1$trial_number <- as.numeric(session1$trial_number)
session1$reaction_time <- as.numeric(session1$reaction_time)
session1$correct <- as.numeric(session1$correct)
session1$order <- substr(session1$spreadsheet_name,1,4)
session1$session <- "Session 1"
# Separate data by block.
PC.session1 <- subset(session1,grepl("PC",block))
setwd("/Volumes/netapp/MyersLab/Dave/SM18-Replication/Stats/session2")
# Read in files.
file_names <- list.files(path = ".", pattern = "*.csv", all.files = FALSE,
full.names = FALSE, recursive = FALSE)
# Create data frame.
session2 <- data.frame()
# Loop to create combined dataframe.
for (i in file_names) {
data <- fread(i, header = TRUE, sep = ",")
session2 <- rbind(session2, data)
}
# Various housekeeping things.
# Make variable names syntactically valid.
session2 <- clean_names(session2)
# Select only columns we want.
session2 <- dplyr::filter(session2,session2$trial_number != "BEGIN TASK")
session2 <- dplyr::filter(session2,session2$trial_number != "END TASK")
session2 <- select(session2,participant_public_id,spreadsheet_name,spreadsheet_row,trial_number,
zone_type,reaction_time,response,attempt,correct,display,fname,branch_ee59,branch_52fz)
# Remove trials where stimulus failed to load.
session2 <- subset(session2,spreadsheet_name!="")
# Rename some variables (naming in Gorilla is opaque)
names(session2)[12] <- "Headphone.1"
names(session2)[13] <- "Headphone.2"
names(session2)[11] <- "stimulus"
names(session2)[10] <- "block"
names(session2)[1] <- "ID"
# Set vectors.
session2$spreadsheet_row <- as.numeric(session2$spreadsheet_row)
session2$trial_number <- as.numeric(session2$trial_number)
session2$reaction_time <- as.numeric(session2$reaction_time)
session2$correct <- as.numeric(session2$correct)
session2$order <- substr(session2$spreadsheet_name,1,4)
session2$session <- "Session 2"
PC.session2 <- subset(session2,grepl("PC",block))
rm(data)
PC.both.complete <- rbind(PC.session1,PC.session2)
PC.both.complete <- PC.both.complete[PC.session1$ID %in% PC.session2$ID, ]
# Rename "block" to bias for transparency.
names(PC.both.complete)[10] <- "bias"
PC.both.complete$bias <- ifelse(PC.both.complete$bias=="PC-S","S-Bias",ifelse(PC.both.complete$bias=="PC-SH","SH-Bias",""))
PC.both.complete <- subset(PC.both.complete,zone_type=="response_keyboard_single")
Counts <- PC.both.complete %>%
group_by(ID) %>%
summarise(Count = n_distinct(session))
Counts <- PC.both.complete %>%
group_by(ID) %>%
summarise(Count = n_distinct(session))
View(Counts)
n_distinct(PC.both.complete$ID)
PC.both.complete <- PC.both.complete[PC.session1$ID %in% PC.session2$ID, ]
n_distinct(PC.both.complete$ID)
rm(list = ls(all = TRUE))
# Load packages.
# Data manipulation.
library(data.table)
library(dplyr)
library(stringr)
library(rio)
library(tidyverse)
library(janitor)
# Plots.
library(ggplot2)
library(cowplot)
# Analyses.
library(afex)
library(lme4)
library(lmerTest)
theme_set(theme_bw())
#### Import Data ####
# Session 1
# Set working directory.
setwd("/Volumes/netapp/MyersLab/Dave/SM18-Replication/Stats/session1")
# Read in files.
file_names <- list.files(path = ".", pattern = "*.csv", all.files = FALSE,
full.names = FALSE, recursive = FALSE)
# Create data frame.
session1 <- data.frame()
# Loop to create combined dataframe.
for (i in file_names) {
data <- fread(i, header = TRUE, sep = ",")
session1 <- rbind(session1, data)
}
# Various housekeeping things.
# make variable names syntactically valid.
session1 <- clean_names(session1)
# Select only columns we want.
session1 <- dplyr::filter(session1,session1$trial_number != "BEGIN TASK")
session1 <- dplyr::filter(session1,session1$trial_number != "END TASK")
session1 <- select(session1,participant_public_id,spreadsheet_name,spreadsheet_row,trial_number,
zone_type,reaction_time,response,attempt,correct,display,fname,branch_ee59,branch_52fz)
# Remove trials where stimulus failed to load.
session1 <- subset(session1,spreadsheet_name!="")
# Rename some variables (naming in Gorilla is opaque)
names(session1)[12] <- "Headphone.1"
names(session1)[13] <- "Headphone.2"
names(session1)[11] <- "stimulus"
names(session1)[10] <- "block"
names(session1)[1] <- "ID"
# Set vectors.
session1$spreadsheet_row <- as.numeric(session1$spreadsheet_row)
session1$trial_number <- as.numeric(session1$trial_number)
session1$reaction_time <- as.numeric(session1$reaction_time)
session1$correct <- as.numeric(session1$correct)
session1$order <- substr(session1$spreadsheet_name,1,4)
session1$session <- "Session 1"
# Separate data by block.
PC.session1 <- subset(session1,grepl("PC",block))
LD.session1 <- subset(session1,grepl("LD",block))
# Session 2
# Set working directory.
setwd("/Volumes/netapp/MyersLab/Dave/SM18-Replication/Stats/session2")
# Read in files.
file_names <- list.files(path = ".", pattern = "*.csv", all.files = FALSE,
full.names = FALSE, recursive = FALSE)
# Create data frame.
session2 <- data.frame()
# Loop to create combined dataframe.
for (i in file_names) {
data <- fread(i, header = TRUE, sep = ",")
session2 <- rbind(session2, data)
}
# Various housekeeping things.
# Make variable names syntactically valid.
session2 <- clean_names(session2)
# Select only columns we want.
session2 <- dplyr::filter(session2,session2$trial_number != "BEGIN TASK")
session2 <- dplyr::filter(session2,session2$trial_number != "END TASK")
session2 <- select(session2,participant_public_id,spreadsheet_name,spreadsheet_row,trial_number,
zone_type,reaction_time,response,attempt,correct,display,fname,branch_ee59,branch_52fz)
# Remove trials where stimulus failed to load.
session2 <- subset(session2,spreadsheet_name!="")
# Rename some variables (naming in Gorilla is opaque)
names(session2)[12] <- "Headphone.1"
names(session2)[13] <- "Headphone.2"
names(session2)[11] <- "stimulus"
names(session2)[10] <- "block"
names(session2)[1] <- "ID"
# Set vectors.
session2$spreadsheet_row <- as.numeric(session2$spreadsheet_row)
session2$trial_number <- as.numeric(session2$trial_number)
session2$reaction_time <- as.numeric(session2$reaction_time)
session2$correct <- as.numeric(session2$correct)
session2$order <- substr(session2$spreadsheet_name,1,4)
session2$session <- "Session 2"
# Separate data by block.
PC.session2 <- subset(session2,grepl("PC",block))
LD.session2 <- subset(session2,grepl("LD",block))
# Clean up.
rm(data)
PC.both.complete <- rbind(PC.session1,PC.session2)
Counts <- PC.both.complete %>%
group_by(ID) %>%
summarise(Count = n_distinct(session))
View(Counts)
rm(Counts)
DNF <- PC.both.complete %>%
group_by(ID) %>%
summarise(Count = n_distinct(session))
DNF <- subset(DNF,Count=1)
View(DNF)
DNF <- subset(DNF,Count=1)
DNF <- subset(DNF,Count==1)
View(DNF)
PC.both.complete <- PC.both.complete[ ! PC.both.complete$ID %in% DNF$ID, ]
n_distinct(PC.both.complete$ID)
# Rename "block" to bias for transparency.
names(PC.both.complete)[10] <- "bias"
PC.both.complete$bias <- ifelse(PC.both.complete$bias=="PC-S","S-Bias",ifelse(PC.both.complete$bias=="PC-SH","SH-Bias",""))
View(PC.both.complete)
# Check number of IDs by headphone checks; X fail both checks.
Counts <- PC.both.complete %>%
group_by(spreadsheet_name, Headphone.1, Headphone.2) %>%
summarise(Count = n_distinct(ID))
View(Counts)
PC.both.complete <- filter(PC.both.complete, Headphone.1 == "Pass" | Headphone.2 == "Pass")
PC.both.complete$ID <- factor(PC.both.complete$ID)
n_distinct(PC.both.complete$ID) # N=59
View(PC.both.complete)
foo <- subset(PC.both.complete,zone_type=="response_keyboard_single")
n_distinct(foo$ID)
View(foo)
foo %>%
group_by(ID) %>%
summarise(Count = n_distinct(session))
a <- foo %>%
group_by(ID) %>%
summarise(Count = n_distinct(session))
View(a)
View(PC.both.complete)
rm(a,foo)
PC.both.complete <- subset(PC.both.complete,zone_type=="response_keyboard_single")
n_distinct(PC.both.complete$ID) # N=59
# Change response from string to binary integer.
PC.both.complete$resp1 <- ifelse(PC.both.complete$response=="sign",1,0)
# Add vector for continuum step.
PC.both.complete$step <- ifelse(PC.both.complete$stimulus=="TW001_20SS_80SH-001.mp3",1,
ifelse(PC.both.complete$stimulus=="TW002_30SS_70SH-001.mp3",2,
ifelse(PC.both.complete$stimulus=="TW003_40SS_60SH-001.mp3",3,
ifelse(PC.both.complete$stimulus=="TW004_50SS_50SH-001.mp3",4,
ifelse(PC.both.complete$stimulus=="TW005_60SS_40SH-001.mp3",5,
ifelse(PC.both.complete$stimulus=="TW006_70SS_30SH-001.mp3",6,
ifelse(PC.both.complete$stimulus=="TW007_80SS_20SH-001.mp3",7,NA)))))))
exclude <- subset(PC.both.complete, step==1 | step==7)
exclude <- exclude %>%
group_by(ID,step,session) %>%
summarize(endpointResp=mean(resp1))
exclude <- subset(exclude,step==1&endpointResp>.2|step==7&endpointResp<.8)
View(exclude)
n_distinct(exclude$ID) # N = 51
PC.both.complete <- PC.both.complete[ ! PC.both.complete$ID %in% exclude$ID, ]
n_distinct(PC.both.complete$ID) # N = 51
citation("afex")
citation("lme4")
install.packages(c("afex", "ape", "assertthat", "backports", "bayesplot", "BH", "boot", "bridgesampling", "brms", "broom", "callr", "car", "checkmate", "class", "classInt", "cli", "clipr", "cluster", "coda", "codetools", "coin", "colorspace", "cowplot", "cubature", "curl", "data.table", "dbplyr", "deldir", "digest", "dplyr", "DT", "effects", "ellipsis", "emmeans", "evaluate", "expm", "forcats", "foreign", "fs", "future", "ggplot2", "ggpol", "ggpubr", "ggrepel", "ggsignif", "glue", "gtable", "haven", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "jomo", "jsonlite", "jtools", "knitr", "later", "lavaan", "lazyeval", "libcoin", "lme4", "lmerTest", "loo", "maptools", "markdown", "MASS", "Matrix", "matrixStats", "MCMCglmm", "MEMSS", "mgcv", "mice", "mime", "mitml", "mlmRev", "modelr", "multcomp", "mvtnorm", "nlme", "numDeriv", "openssl", "openxlsx", "ordinal", "pillar", "pkgbuild", "pkgconfig", "polynom", "processx", "promises", "ps", "psych", "purrr", "quantreg", "quickpsy", "R.rsp", "R.utils", "R6", "Rcpp", "RcppArmadillo", "RCurl", "readr", "readxl", "remotes", "reprex", "rlang", "rmarkdown", "rpart", "rsconnect", "rstan", "rstantools", "rstudioapi", "rvest", "sandwich", "sf", "shiny", "spData", "spdep", "StanHeaders", "statmod", "stringi", "stringr", "survey", "survival", "sys", "testthat", "TH.data", "tibble", "tidyr", "tinytex", "units", "vctrs", "whisker", "xfun", "xml2", "xtable", "zip", "zoo"))
install.packages(c("afex", "ape", "assertthat", "backports", "bayesplot", "BH", "boot", "bridgesampling", "brms", "broom", "callr", "car", "checkmate", "class", "classInt", "cli", "clipr", "cluster", "coda", "codetools", "coin", "colorspace", "cowplot", "cubature", "curl", "data.table", "dbplyr", "deldir", "digest", "dplyr", "DT", "effects", "ellipsis", "emmeans", "evaluate", "expm", "forcats", "foreign", "fs", "future", "ggplot2", "ggpol", "ggpubr", "ggrepel", "ggsignif", "glue", "gtable", "haven", "highr", "hms", "htmltools", "htmlwidgets", "httpuv", "httr", "igraph", "jomo", "jsonlite", "jtools", "knitr", "later", "lavaan", "lazyeval", "libcoin", "lme4", "lmerTest", "loo", "maptools", "markdown", "MASS", "Matrix", "matrixStats", "MCMCglmm", "MEMSS", "mgcv", "mice", "mime", "mitml", "mlmRev", "modelr", "multcomp", "mvtnorm", "nlme", "numDeriv", "openssl", "openxlsx", "ordinal", "pillar", "pkgbuild", "pkgconfig", "polynom", "processx", "promises", "ps", "psych", "purrr", "quantreg", "quickpsy", "R.rsp", "R.utils", "R6", "Rcpp", "RcppArmadillo", "RCurl", "readr", "readxl", "remotes", "reprex", "rlang", "rmarkdown", "rpart", "rsconnect", "rstan", "rstantools", "rstudioapi", "rvest", "sandwich", "sf", "shiny", "spData", "spdep", "StanHeaders", "statmod", "stringi", "stringr", "survey", "survival", "sys", "testthat", "TH.data", "tibble", "tidyr", "tinytex", "units", "vctrs", "whisker", "xfun", "xml2", "xtable", "zip", "zoo"))
version
