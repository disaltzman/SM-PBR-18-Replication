n_distinct(Gesture_Comp_Data_for_RT$BlockName)
Gesture_Comp_Data_for_RT$
# Preprocessing of data
Gesture_Comp_Data_for_RT <- Gesture_Comp_Data_for_RT %>% filter(Minus2500 < 0)
Gesture_Comp_Data_for_RT %>% filter(Minus2500 < 0)
Gesture_Comp_Data_for_RT$
# Preprocessing of data
Gesture_Comp_Data_for_RT <- Gesture_Comp_Data_for_RT %>% filter(Minus2500 > 0)
Gesture_Comp_Data_for_RT$
# Preprocessing of data
Gesture_Comp_Data_for_RT %>% filter(Minus2500 > 0)
source('~/.active-rstudio-document', echo=TRUE)
Gesture_Comp_Data_for_RT$
# Preprocessing of data
Gesture_Comp_Data_for_RT %>% filter(Minus2500 > 0)
Gesture_Comp_Data_for_RT$
# Preprocessing of data
Gesture_Comp_Data_for_RT %>% filter(Gesture_Comp_Data_for_RT$Minus2500 > 0)
Gesture_Comp_Data_for_RT$
# Preprocessing of data
Gesture_Comp_Data_for_RT %>% filter(Gesture_Comp_Data_for_RT$Minus2500 > 0)
library(tidyverse)
Gesture_Comp_Data_for_RT$
# Preprocessing of data
Gesture_Comp_Data_for_RT %>% filter(Minus2500 > 0)
Gesture_Comp_Data_for_RT$
# Preprocessing of data
Gesture_Comp_Data_for_RT <- Gesture_Comp_Data_for_RT %>% filter(Minus2500 > 0)
View(Gesture_Comp_Data_for_RT)
Gesture_Comp_Data_for_RT$
# Preprocessing of data
Gesture_Comp_Data_for_RT <- subset(Gesture_Comp_Data_for_RT,Minus2500 > 0)
View(Gesture_Comp_Data_for_RT)
# Data manipulation.
library(tidyverse)
# Plots.
library(cowplot)
library(RColorBrewer)
# Analyses.
library(afex)
library(lme4)
library(lmerTest)
library(quickpsy)
library(emmeans)
# Import data from Excel file.
library(readxl)
Gesture_Comp_Data_for_RT <- read_excel("D:/Users/Downloads/Gesture Comp Data for RT.xlsx")
Gesture_Comp_Data_for_RT
Gesture_Comp_Data_for_RT <- as.dataframe(read_excel("D:/Users/Downloads/Gesture Comp Data for RT.xlsx"))
Gesture_Comp_Data_for_RT <- as.data.frame(read_excel("D:/Users/Downloads/Gesture Comp Data for RT.xlsx"))
Gesture_Comp_Data_for_RT
# Set vectors to appropriate types
Gesture_Comp_Data_for_RT$Condition <- as.factor(Gesture_Comp_Data_for_RT$Condition)
Gesture_Comp_Data_for_RT$
# Preprocessing of data
Gesture_Comp_Data_for_RT <- subset(Gesture_Comp_Data_for_RT,Minus2500 > 0)
Gesture_Comp_Data_for_RT$
# Preprocessing of data
subset(Gesture_Comp_Data_for_RT,Minus2500 > 0)
Gesture_Comp_Data_for_RT$
# Preprocessing of data
subset(Gesture_Comp_Data_for_RT,Minus2500 > 0)
# Set working directory.
setwd("./")
# Read in files.
file_names <- list.files(path = ".", pattern = "*.csv", all.files = FALSE,
full.names = FALSE, recursive = FALSE)
# Set working directory.
setwd(".")
# Read in files.
file_names <- list.files(path = ".", pattern = "*.csv", all.files = FALSE,
full.names = FALSE, recursive = FALSE)
# Set working directory.
setwd("./Analysis")
# Set working directory.
setwd("./Analysis")
# Set working directory.
setwd("./Analysis/")
utils::getSrcDirectory
# Set working directory.
script.dir <- dirname(sys.frame(1)$ofile)
# Set working directory.
this.dir <- dirname(parent.frame(2)$ofile) # frame(3) also works.
setwd(this.dir)
# Set working directory.
this.dir <- dirname(parent.frame(2)$ofile) # frame(3) also works.
# Set working directory.
this_dir <- function(directory)
setwd( file.path(getwd(), directory) )
# Read in files.
file_names <- list.files(path = ".", pattern = "*.csv", all.files = FALSE,
full.names = FALSE, recursive = FALSE)
# Create data frame.
session1 <- data.frame()
install.packages("here")
library(here)
# Set working directory.
here()
# Set working directory.
here()
# Data manipulation.
library(tidyverse)
library(janitor)
library(here)
# Plots.
library(cowplot)
library(RColorBrewer)
# Analyses.
library(afex)
library(lme4)
library(lmerTest)
library(quickpsy)
library(emmeans)
theme_set(theme_bw())
# Set working directory.
here()
rm(list = ls())
# Data manipulation.
library(tidyverse)
library(janitor)
library(here)
library(data.table)
# Plots.
library(cowplot)
library(RColorBrewer)
# Analyses.
library(afex)
library(lme4)
library(lmerTest)
library(quickpsy)
library(emmeans)
theme_set(theme_bw())
#### Import Data & Clean ####
# Read in files
file_names <- list.files(path = here("Change Detection","Analysis"), pattern = "*.csv", all.files = FALSE,
full.names = FALSE, recursive = FALSE)
# Create data frame
df <- data.frame()
# Loop to create combined dataframe
for (i in file_names) {
data <- fread(here("Change Detection","Analysis",i), header = TRUE, sep = ",")
df <- rbind(df, data)
}
# Various housekeeping things
# make variable names programming friendly
df <- clean_names(df)
df <- filter(df,df$trial_number != "BEGIN TASK")
df <- filter(df,df$trial_number != "END TASK")
df <- select(df,participant_public_id,spreadsheet_name,spreadsheet_row,trial_number,
zone_type,reaction_time,response,attempt,correct,display,fname,branch_ee59,branch_52fz,utc_date,answer,type,randomise_blocks)
# Subset to just response rows (and timedout trials)
df <- subset(df,zone_type=="response_keyboard_single"|zone_type=="gonogo_audio")
rm(list = ls())
# Data manipulation.
library(tidyverse)
library(janitor)
library(here)
library(data.table)
# Plots.
library(cowplot)
library(RColorBrewer)
# Analyses.
library(afex)
library(lme4)
library(lmerTest)
library(quickpsy)
library(emmeans)
theme_set(theme_bw())
#### Import Data & Clean ####
# Read in files
file_names <- list.files(path = here("Change Detection","Analysis"), pattern = "*.csv", all.files = FALSE,
full.names = FALSE, recursive = FALSE)
here()
# Read in files
file_names <- list.files(path = here("Change Detection","Analysis"), pattern = "*.csv", all.files = FALSE,
full.names = FALSE, recursive = FALSE)
here()
rm(list = ls())
# Data manipulation.
library(tidyverse)
library(janitor)
library(here)
library(data.table)
# Plots.
library(cowplot)
library(RColorBrewer)
# Analyses.
library(afex)
library(lme4)
library(lmerTest)
library(quickpsy)
library(emmeans)
theme_set(theme_bw())
# Read in files
file_names <- list.files(path = here("Change Detection","Analysis"), pattern = "*.csv", all.files = FALSE,
full.names = FALSE, recursive = FALSE)
rm(list = ls())
# Data manipulation.
library(tidyverse)
library(janitor)
library(here)
library(data.table)
# Plots.
library(cowplot)
library(RColorBrewer)
# Analyses.
library(afex)
library(lme4)
library(lmerTest)
library(quickpsy)
library(emmeans)
theme_set(theme_bw())
# Import data
df <- read.csv(here("exp1_trialdata.csv"),header=TRUE)
# Rename some vectors to be machine readable
names(df)[1] <- "Participant"
here()
setwd("C:/Users/David/Desktop/SM-PBR-18-Replication/Stats")
rm(list = ls(all = TRUE))
# Load packages.
# Data manipulation.
library(data.table)
library(stringr)
library(rio)
library(tidyverse)
library(janitor)
# Plots.
library(ggplot2)
library(cowplot)
# Analyses.
library(afex)
library(lme4)
library(lmerTest)
library(emmeans)
library(quickpsy)
theme_set(theme_bw())
setwd("./session1")
# Read in files.
file_names <- list.files(path = ".", pattern = "*.csv", all.files = FALSE,
full.names = FALSE, recursive = FALSE)
# Create data frame.
session1 <- data.frame()
# Loop to create combined dataframe.
for (i in file_names) {
data <- fread(i, header = TRUE, sep = ",")
session1 <- rbind(session1, data)
}
# Various housekeeping things.
# make variable names syntactically valid.
session1 <- clean_names(session1)
# Select only columns we want.
session1 <- dplyr::filter(session1,session1$trial_number != "BEGIN TASK")
session1 <- dplyr::filter(session1,session1$trial_number != "END TASK")
session1 <- select(session1,participant_public_id,spreadsheet_name,spreadsheet_row,trial_number,
zone_type,reaction_time,response,attempt,correct,display,fname,branch_ee59,branch_52fz,utc_date)
# Remove trials where stimulus failed to load.
session1 <- subset(session1,spreadsheet_name!="")
# Rename some variables (naming in Gorilla is opaque)
names(session1)[12] <- "Headphone.1"
names(session1)[13] <- "Headphone.2"
names(session1)[11] <- "stimulus"
names(session1)[10] <- "block"
names(session1)[1] <- "ID"
# Set vectors.
session1$spreadsheet_row <- as.numeric(session1$spreadsheet_row)
session1$trial_number <- as.numeric(session1$trial_number)
session1$reaction_time <- as.numeric(session1$reaction_time)
session1$correct <- as.numeric(session1$correct)
session1$order <- substr(session1$spreadsheet_name,1,4)
session1$session <- "Session 1"
# Separate data by block.
PC.session1 <- subset(session1,grepl("PC",block))
LD.session1 <- subset(session1,grepl("LD",block))
# Check stimulus repetitions (rectifying SM18 issue)
PC.session1 %>% group_by(stimulus,ID) %>% summarize(n=length(stimulus))
# Number of participants.
n_distinct(session1$ID) # N=108 (6 subjects data rejected before analysis for non-compliance)
# Session 2
# Set working directory.
setwd("../session2")
# Read in files.
file_names <- list.files(path = ".", pattern = "*.csv", all.files = FALSE,
full.names = FALSE, recursive = FALSE)
# Create data frame.
session2 <- data.frame()
# Loop to create combined dataframe.
for (i in file_names) {
data <- fread(i, header = TRUE, sep = ",")
session2 <- rbind(session2, data)
}
# Various housekeeping things.
# Make variable names syntactically valid.
session2 <- clean_names(session2)
# Select only columns we want.
session2 <- dplyr::filter(session2,session2$trial_number != "BEGIN TASK")
session2 <- dplyr::filter(session2,session2$trial_number != "END TASK")
session2 <- select(session2,participant_public_id,spreadsheet_name,spreadsheet_row,trial_number,
zone_type,reaction_time,response,attempt,correct,display,fname,branch_ee59,branch_52fz,utc_date)
# Remove trials where stimulus failed to load.
session2 <- subset(session2,spreadsheet_name!="")
# Rename some variables (naming in Gorilla is opaque)
names(session2)[12] <- "Headphone.1"
names(session2)[13] <- "Headphone.2"
names(session2)[11] <- "stimulus"
names(session2)[10] <- "block"
names(session2)[1] <- "ID"
# Set vectors.
session2$spreadsheet_row <- as.numeric(session2$spreadsheet_row)
session2$trial_number <- as.numeric(session2$trial_number)
session2$reaction_time <- as.numeric(session2$reaction_time)
session2$correct <- as.numeric(session2$correct)
session2$order <- substr(session2$spreadsheet_name,1,4)
session2$session <- "Session 2"
# Separate data by block.
PC.session2 <- subset(session2,grepl("PC",block))
LD.session2 <- subset(session2,grepl("LD",block))
# Number of participants.
n_distinct(session2$ID) # N=99
# Clean up.
rm(data)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Combine data frames.
PC.both.complete <- rbind(PC.session1,PC.session2)
PC.both.complete$ID <- as.factor(PC.both.complete$ID)
# Only include ID's who completed both sessions.
DNF <- PC.both.complete %>%
group_by(ID) %>%
summarise(Count = n_distinct(session))
DNF <- subset(DNF,Count==1)
PC.both.complete <- PC.both.complete[ ! PC.both.complete$ID %in% DNF$ID, ]
n_distinct(PC.both.complete$ID) # N = 98 who completed both sessions
# Rename "block" to bias for transparency.
names(PC.both.complete)[10] <- "bias"
PC.both.complete$bias <- ifelse(PC.both.complete$bias=="PC-S","S-Bias",ifelse(PC.both.complete$bias=="PC-SH","SH-Bias",""))
# Check number of IDs by headphone checks; X fail both checks.
Counts <- PC.both.complete %>%
group_by(spreadsheet_name, Headphone.1, Headphone.2) %>%
summarise(Count = n_distinct(ID))
# Remove subjects who failed both headphone checks.
PC.both.complete <- filter(PC.both.complete, Headphone.1 == "Pass" | Headphone.2 == "Pass")
PC.both.complete$ID <- factor(PC.both.complete$ID)
# See how many participants remain after removing double headphone check fails.
n_distinct(PC.both.complete$ID) # N=83
# Drop NA trials.
PC.both.complete <- subset(PC.both.complete,zone_type=="response_keyboard_single")
# Change response from string to binary integer.
PC.both.complete$resp1 <- ifelse(PC.both.complete$response=="sign",1,0)
# Add vector for continuum step.
PC.both.complete$step <- ifelse(PC.both.complete$stimulus=="TW001_20SS_80SH-001.mp3",1,
ifelse(PC.both.complete$stimulus=="TW002_30SS_70SH-001.mp3",2,
ifelse(PC.both.complete$stimulus=="TW003_40SS_60SH-001.mp3",3,
ifelse(PC.both.complete$stimulus=="TW004_50SS_50SH-001.mp3",4,
ifelse(PC.both.complete$stimulus=="TW005_60SS_40SH-001.mp3",5,
ifelse(PC.both.complete$stimulus=="TW006_70SS_30SH-001.mp3",6,
ifelse(PC.both.complete$stimulus=="TW007_80SS_20SH-001.mp3",7,NA)))))))
# Filter out participants who did not meet S&M18 endpoint accuracy criteria (<80% accuracy) on either session.
exclude <- subset(PC.both.complete, step==1 | step==7)
exclude <- exclude %>%
group_by(ID,step,session) %>%
summarize(endpointResp=mean(resp1))
exclude <- subset(exclude,step==1&endpointResp>.2|step==7&endpointResp<.8)
# Count how many participants are going to be excluded for accuracy.
n_distinct(exclude$ID) # N = 20
# Remove those participants.
PC.both.complete <- PC.both.complete[ ! PC.both.complete$ID %in% exclude$ID, ]
# Check how many subjects reman after excluding based on both headphone check fails and acccuracy.
n_distinct(PC.both.complete$ID) # N = 63
# Check distribution of presentation order.
PC.both.complete %>%
group_by(order) %>%
summarise(Count = n_distinct(ID)) # S_SH n=32, SH_S n=31
# Combine data frames
LD.both.complete <- rbind(LD.session1,LD.session2)
# Subset just to responses
LD.both.complete <- subset(LD.both.complete,zone_type=="response_keyboard_single")
# Subset just to participants in PC analysis
LD.both.complete <- LD.both.complete[LD.both.complete$ID %in% PC.both.complete$ID, ]
# Add word type variable
LD.both.complete$type <- ifelse(grepl("NW",LD.both.complete$stimulus),"Non-word Filler",ifelse(grepl("FW",LD.both.complete$stimulus),"Word Filler",
ifelse(grepl("_CLR_",LD.both.complete$stimulus),"Clear Word",ifelse(grepl("_AMB_",LD.both.complete$stimulus),"Ambiguous Word",""))))
# Summarize
LD.stats <- Rmisc::summarySE(LD.both.complete,measurevar = "correct",groupvars = c("block","order","type","session"))
LD.stats <- subset(LD.stats,type=="Ambiguous Word"|type=="Clear Word")
ggplot(LD.stats,aes(x=type,y=correct,color=block,linetype=order)) +
geom_bar(aes(color=block,linetype=order),stat="identity",alpha=0,position=position_dodge(width=1)) +
geom_errorbar(aes(ymin=correct-se,ymax=correct+se),position=position_dodge(width=1)) +
scale_color_manual("Block",values=c("#B03A2E","#2874A6")) +
scale_linetype_manual("Order",values=c("solid","dashed")) +
facet_wrap(~session) +
coord_cartesian(ylim=c(0.6,1)) +
xlab("Word type") + ylab("Proportion correct") +
theme(text = element_text(size=18))
LD.both.complete <- subset(LD.both.complete,type=="Ambiguous Word"|type=="Clear Word")
# Set to factors
LD.both.complete$session <- as.factor(LD.both.complete$session)
LD.both.complete$block <- as.factor(LD.both.complete$block)
LD.both.complete$type <- as.factor(LD.both.complete$type)
LD.both.complete$ID <- as.factor(LD.both.complete$ID)
LD.both.complete$order <- as.factor(LD.both.complete$order)
# Mixed-effects models
model1 <- mixed(correct ~ type*block*order*session +
(type:block:session||ID) + (type||ID) + (block||ID) + (session||ID), family=binomial(link="logit"),
data=LD.both.complete,method="LRT",expand_re = TRUE,
control = glmerControl(optimizer="nloptwrap",calc.derivs = FALSE, optCtrl = list(maxfun = 20000)))
model2 <- mixed(correct ~ type*block*order*session +
(type:block:session||ID) + (type||ID) + (block||ID), family=binomial(link="logit"),
data=LD.both.complete,method="LRT",expand_re = TRUE,
control = glmerControl(optimizer="nloptwrap",calc.derivs = FALSE, optCtrl = list(maxfun = 20000)))
model3 <- mixed(correct ~ type*block*order*session +
(type:block:session||ID) + (type||ID) + (session||ID), family=binomial(link="logit"),
data=LD.both.complete,method="LRT",expand_re = TRUE,
control = glmerControl(optimizer="nloptwrap",calc.derivs = FALSE, optCtrl = list(maxfun = 20000)))
model4 <- mixed(correct ~ type*block*order*session +
(type:block:session||ID) + (block||ID) + (sesssion||ID), family=binomial(link="logit"),
data=LD.both.complete,method="LRT",expand_re = TRUE,
control = glmerControl(optimizer="nloptwrap",calc.derivs = FALSE, optCtrl = list(maxfun = 20000)))
model5 <- mixed(correct ~ type*block*order*session +
(type:block:session||ID) + (type||ID), family=binomial(link="logit"),
data=LD.both.complete,method="LRT",expand_re = TRUE,
control = glmerControl(optimizer="nloptwrap",calc.derivs = FALSE, optCtrl = list(maxfun = 20000)))
model6 <- mixed(correct ~ type*block*order*session +
(type:block:session||ID) + (block||ID), family=binomial(link="logit"),
data=LD.both.complete,method="LRT",expand_re = TRUE,
control = glmerControl(optimizer="nloptwrap",calc.derivs = FALSE, optCtrl = list(maxfun = 20000)))
model7 <- mixed(correct ~ type*block*order*session +
(type:block:session||ID) + (session||ID), family=binomial(link="logit"),
data=LD.both.complete,method="LRT",expand_re = TRUE,
control = glmerControl(optimizer="nloptwrap",calc.derivs = FALSE, optCtrl = list(maxfun = 20000)))
model8 <- mixed(correct ~ type*block*order*session +
(type:block:session||ID), family=binomial(link="logit"),
data=LD.both.complete,method="LRT",expand_re = TRUE,
control = glmerControl(optimizer="nloptwrap",calc.derivs = FALSE, optCtrl = list(maxfun = 20000)))
model9 <- mixed(correct ~ type*block*order*session +
(type||ID) + (block||ID) + (session||ID), family=binomial(link="logit"),
data=LD.both.complete,method="LRT",expand_re = TRUE,
control = glmerControl(optimizer="nloptwrap",calc.derivs = FALSE, optCtrl = list(maxfun = 20000)))
model10 <- mixed(correct ~ type*block*order*session +
(type||ID) + (block||ID), family=binomial(link="logit"),
data=LD.both.complete,method="LRT",expand_re = TRUE,
control = glmerControl(optimizer="nloptwrap",calc.derivs = FALSE, optCtrl = list(maxfun = 20000)))
model11 <- mixed(correct ~ type*block*order*session +
(type||ID) + (session||ID), family=binomial(link="logit"),
data=LD.both.complete,method="LRT",expand_re = TRUE,
control = glmerControl(optimizer="nloptwrap",calc.derivs = FALSE, optCtrl = list(maxfun = 20000)))
model12 <- mixed(correct ~ type*block*order*session +
(block||ID) + (session||ID), family=binomial(link="logit"),
data=LD.both.complete,method="LRT",expand_re = TRUE,
control = glmerControl(optimizer="nloptwrap",calc.derivs = FALSE, optCtrl = list(maxfun = 20000)))
model13 <- mixed(correct ~ type*block*order*session +
(type||ID), family=binomial(link="logit"),
data=LD.both.complete,method="LRT",expand_re = TRUE,
control = glmerControl(optimizer="nloptwrap",calc.derivs = FALSE, optCtrl = list(maxfun = 20000)))
model14 <- mixed(correct ~ type*block*order*session +
(block||ID), family=binomial(link="logit"),
data=LD.both.complete,method="LRT",expand_re = TRUE,
control = glmerControl(optimizer="nloptwrap",calc.derivs = FALSE, optCtrl = list(maxfun = 20000)))
model15 <- mixed(correct ~ type*block*order*session +
(session||ID), family=binomial(link="logit"),
data=LD.both.complete,method="LRT",expand_re = TRUE,
control = glmerControl(optimizer="nloptwrap",calc.derivs = FALSE, optCtrl = list(maxfun = 20000)))
model16 <- mixed(correct ~ type*block*order*session +
(1|ID), family=binomial(link="logit"),
data=LD.both.complete,method="LRT",expand_re = TRUE,
control = glmerControl(optimizer="nloptwrap",calc.derivs = FALSE))
model4 <- mixed(correct ~ type*block*order*session +
(type:block:session||ID) + (block||ID) + (session||ID), family=binomial(link="logit"),
data=LD.both.complete,method="LRT",expand_re = TRUE,
control = glmerControl(optimizer="nloptwrap",calc.derivs = FALSE, optCtrl = list(maxfun = 20000)))
# Compare
anova(model1,model2,model3,model4,model5,model6,model7,model8,model9,model10,model11,model12,model13,model14,model15,model16)
anova(model1,model2)
# Compare
anova(model1,model2,model3,model4,model5,model6,model7,model8,model9,model10,model11,model12,model13,model14,model15,model16)
anova(model1,model4)
anova(model2,model3)
anova(model2,model4)
anova(model2,model1)
# Compare
anova(model1,model2,model3,model4,model5,model6,model7,model8,model9,model10,model11,model12,model13,model14,model15,model16)
anova(model1,model4)
anova(model2,model7)
model2
# Summarize
LD.stats <- Rmisc::summarySE(LD.both.complete,measurevar = "correct",groupvars = c("block","order","type","session"))
LD.stats <- subset(LD.stats,type=="Ambiguous Word"|type=="Clear Word")
View(LD.stats)
misc::summarySE(LD.both.complete,measurevar = "correct",groupvars = "type")
Rmisc::summarySE(LD.both.complete,measurevar = "correct",groupvars = "type")
Rmisc::summarySE(LD.both.complete,measurevar = "correct",groupvars = "session")
# Post hoc
biasXorder <- emmeans(model2, ~block*order,interaction="pairwise")
pairs(biasXorder,simple="bias")
emmeans(model2, ~block*order,interaction="pairwise")
# Post hoc
biasXorder <- pairs(emmeans(model2, ~block*order,interaction="pairwise"))
biasXorder
pairs(biasXorder,simple="block")
# Post hoc
pairs(emmeans(model2, ~block*order,interaction="pairwise"))
pairs(emmeans(model2, ~block*type,interaction="pairwise"))
model2
# Post hoc
pairs(emmeans(model2, ~block*order,interaction="pairwise"))
Rmisc::summarySE(data=LD.both.complete,measurevar = "correct",groupvars = c("block","order"))
pairs(emmeans(model2, ~block*type,interaction="pairwise"))
pairs(emmeans(model2, ~block*type,interaction="pairwise"))
pairs(emmeans(model2, ~block*session,interaction="pairwise"))
Rmisc::summarySE(data=LD.both.complete,measurevar = "correct",groupvars = c("block","session"))
model2
# Post hoc
pairs(emmeans(model2, ~block*order,interaction="pairwise"))
pairs(emmeans(model2, ~block*type,interaction="pairwise"))
