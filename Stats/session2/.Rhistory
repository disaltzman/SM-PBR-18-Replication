setwd("C:/Users/David/Desktop/GitHubRepos/SM-PBR-18-Replication/Stats")
rm(list = ls(all = TRUE))
# Load packages.
# Data manipulation.
library(data.table)
library(stringr)
library(rio)
library(tidyverse)
library(janitor)
# Plots.
library(ggplot2)
library(cowplot)
# Analyses.
library(afex)
library(lme4)
library(lmerTest)
library(emmeans)
library(quickpsy)
theme_set(theme_bw())
#### Import Data and Clean ####
# Session 1
# Set working directory.
setwd("./session1")
# Read in files.
file_names <- list.files(path = ".", pattern = "*.csv", all.files = FALSE,
full.names = FALSE, recursive = FALSE)
# Create data frame.
session1 <- data.frame()
# Loop to create combined dataframe.
for (i in file_names) {
data <- fread(i, header = TRUE, sep = ",")
session1 <- rbind(session1, data)
}
# Various housekeeping things.
# make variable names syntactically valid.
session1 <- clean_names(session1)
# Select only columns we want.
session1 <- dplyr::filter(session1,session1$trial_number != "BEGIN TASK")
session1 <- dplyr::filter(session1,session1$trial_number != "END TASK")
session1 <- select(session1,participant_public_id,spreadsheet_name,spreadsheet_row,trial_number,
zone_type,reaction_time,response,attempt,correct,display,fname,branch_ee59,branch_52fz,utc_date)
# Remove trials where stimulus failed to load.
session1 <- subset(session1,spreadsheet_name!="")
# Rename some variables (naming in Gorilla is opaque)
names(session1)[12] <- "Headphone.1"
names(session1)[13] <- "Headphone.2"
names(session1)[11] <- "stimulus"
names(session1)[10] <- "block"
names(session1)[1] <- "ID"
# Set vectors.
session1$spreadsheet_row <- as.numeric(session1$spreadsheet_row)
session1$trial_number <- as.numeric(session1$trial_number)
session1$reaction_time <- as.numeric(session1$reaction_time)
session1$correct <- as.numeric(session1$correct)
session1$order <- substr(session1$spreadsheet_name,1,4)
session1$session <- "Session 1"
# Separate data by block.
PC.session1 <- subset(session1,grepl("PC",block))
LD.session1 <- subset(session1,grepl("LD",block))
# Check stimulus repetitions (rectifying SM18 issue)
PC.session1 %>% group_by(stimulus,ID) %>% summarize(n=length(stimulus))
# Number of participants.
n_distinct(session1$ID) # N=108 (6 subjects data rejected before analysis for non-compliance)
# Session 2
# Set working directory.
setwd("../session2")
# Read in files.
file_names <- list.files(path = ".", pattern = "*.csv", all.files = FALSE,
full.names = FALSE, recursive = FALSE)
# Create data frame.
session2 <- data.frame()
# Loop to create combined dataframe.
for (i in file_names) {
data <- fread(i, header = TRUE, sep = ",")
session2 <- rbind(session2, data)
}
# Various housekeeping things.
# Make variable names syntactically valid.
session2 <- clean_names(session2)
# Select only columns we want.
session2 <- dplyr::filter(session2,session2$trial_number != "BEGIN TASK")
session2 <- dplyr::filter(session2,session2$trial_number != "END TASK")
session2 <- select(session2,participant_public_id,spreadsheet_name,spreadsheet_row,trial_number,
zone_type,reaction_time,response,attempt,correct,display,fname,branch_ee59,branch_52fz,utc_date)
# Remove trials where stimulus failed to load.
session2 <- subset(session2,spreadsheet_name!="")
# Rename some variables (naming in Gorilla is opaque)
names(session2)[12] <- "Headphone.1"
names(session2)[13] <- "Headphone.2"
names(session2)[11] <- "stimulus"
names(session2)[10] <- "block"
names(session2)[1] <- "ID"
# Set vectors.
session2$spreadsheet_row <- as.numeric(session2$spreadsheet_row)
session2$trial_number <- as.numeric(session2$trial_number)
session2$reaction_time <- as.numeric(session2$reaction_time)
session2$correct <- as.numeric(session2$correct)
session2$order <- substr(session2$spreadsheet_name,1,4)
session2$session <- "Session 2"
# Separate data by block.
PC.session2 <- subset(session2,grepl("PC",block))
LD.session2 <- subset(session2,grepl("LD",block))
# Number of participants.
n_distinct(session2$ID) # N=99
# Clean up.
rm(data)
# Combine data frames.
PC.both.complete <- rbind(PC.session1,PC.session2)
PC.both.complete$ID <- as.factor(PC.both.complete$ID)
# Only include ID's who completed both sessions.
DNF <- PC.both.complete %>%
group_by(ID) %>%
summarise(Count = n_distinct(session))
DNF <- subset(DNF,Count==1)
PC.both.complete <- PC.both.complete[ ! PC.both.complete$ID %in% DNF$ID, ]
n_distinct(PC.both.complete$ID) # N = 98 who completed both sessions
# Rename "block" to bias for transparency.
names(PC.both.complete)[10] <- "bias"
PC.both.complete$bias <- ifelse(PC.both.complete$bias=="PC-S","S-Bias",ifelse(PC.both.complete$bias=="PC-SH","SH-Bias",""))
# Check number of IDs by headphone checks; X fail both checks.
Counts <- PC.both.complete %>%
group_by(spreadsheet_name, Headphone.1, Headphone.2) %>%
summarise(Count = n_distinct(ID))
# Remove subjects who failed both headphone checks.
PC.both.complete <- filter(PC.both.complete, Headphone.1 == "Pass" | Headphone.2 == "Pass")
PC.both.complete$ID <- factor(PC.both.complete$ID)
# See how many participants remain after removing double headphone check fails.
n_distinct(PC.both.complete$ID) # N=83
# Drop NA trials.
PC.both.complete <- subset(PC.both.complete,zone_type=="response_keyboard_single")
# Change response from string to binary integer.
PC.both.complete$resp1 <- ifelse(PC.both.complete$response=="sign",1,0)
# Add vector for continuum step.
PC.both.complete$step <- ifelse(PC.both.complete$stimulus=="TW001_20SS_80SH-001.mp3",1,
ifelse(PC.both.complete$stimulus=="TW002_30SS_70SH-001.mp3",2,
ifelse(PC.both.complete$stimulus=="TW003_40SS_60SH-001.mp3",3,
ifelse(PC.both.complete$stimulus=="TW004_50SS_50SH-001.mp3",4,
ifelse(PC.both.complete$stimulus=="TW005_60SS_40SH-001.mp3",5,
ifelse(PC.both.complete$stimulus=="TW006_70SS_30SH-001.mp3",6,
ifelse(PC.both.complete$stimulus=="TW007_80SS_20SH-001.mp3",7,NA)))))))
# Filter out participants who did not meet S&M18 endpoint accuracy criteria (<80% accuracy) on either session.
exclude <- subset(PC.both.complete, step==1 | step==7)
exclude <- exclude %>%
group_by(ID,step,session) %>%
summarize(endpointResp=mean(resp1))
exclude <- subset(exclude,step==1&endpointResp>.2|step==7&endpointResp<.8)
# Count how many participants are going to be excluded for accuracy.
n_distinct(exclude$ID) # N = 20
# Remove those participants.
PC.both.complete <- PC.both.complete[ ! PC.both.complete$ID %in% exclude$ID, ]
# Check how many subjects reman after excluding based on both headphone check fails and acccuracy.
n_distinct(PC.both.complete$ID) # N = 63
# Check distribution of presentation order.
PC.both.complete %>%
group_by(order) %>%
summarise(Count = n_distinct(ID)) # S_SH n=32, SH_S n=31
# Calculate statistics about length between session 1 and 2.
library(lubridate)
# Convert to date.
PC.both.complete$utc_date <- as.Date(dmy_hms(PC.both.complete$utc_date))
# Continuum step has beeen scaled for analysis, undo scaling for plotting.
PC.both.complete$step <- ifelse(PC.both.complete$stimulus=="TW001_20SS_80SH-001.mp3",1,
ifelse(PC.both.complete$stimulus=="TW002_30SS_70SH-001.mp3",2,
ifelse(PC.both.complete$stimulus=="TW003_40SS_60SH-001.mp3",3,
ifelse(PC.both.complete$stimulus=="TW004_50SS_50SH-001.mp3",4,
ifelse(PC.both.complete$stimulus=="TW005_60SS_40SH-001.mp3",5,
ifelse(PC.both.complete$stimulus=="TW006_70SS_30SH-001.mp3",6,
ifelse(PC.both.complete$stimulus=="TW007_80SS_20SH-001.mp3",7,NA)))))))
# Calculate stats for plot.
PC.both.complete.stats <- Rmisc::summarySE(data = PC.both.complete, measurevar="resp1",groupvars = c("step","bias","order","session"))
View(PC.both.complete.stats)
View(PC.both.complete)
View(PC.both.complete)
# Subset to session 1 PC data
whooshdata <- subset(PC.both.complete,session=="Session 1")
View(whooshdata)
View(whooshdata)
View(whooshdata)
View(whooshdata)
View(whooshdata)
View(whooshdata)
whoosh_half <- whooshdata %>%
group_by(ID, step) %>%
mutate(trial_number = row_number()) %>%
mutate(Group = ifelse(trial_number %% 2 == 0, "even", "odd"))
View(whoosh_half)
logistic_model <- function(x){
model <- nlme(resp1 ~ 7/(1+exp(-scal*(step-xmid))),
data = x,
fixed = xmid + scal ~ 1,
random = xmid + scal ~ 1|ID,
start = c(xmid = 3.4, scal = .7))
coef(model)
}
View(whoosh_half)
# split by even/odd trials and fit model, extract random effect coefficients
coefs_whoosh <- whoosh_half %>%
split(.$Group) %>%
map(logistic_model)
logistic_model <- function(x){
model <- nlme::nlme(resp1 ~ 7/(1+exp(-scal*(step-xmid))),
data = x,
fixed = xmid + scal ~ 1,
random = xmid + scal ~ 1|ID,
start = c(xmid = 3.4, scal = .7))
coef(model)
}
# split by even/odd trials and fit model, extract random effect coefficients
coefs_whoosh <- whoosh_half %>%
split(.$Group) %>%
map(logistic_model)
# split by even/odd trials and fit model, extract random effect coefficients
coefs_whoosh <- whoosh_half %>%
split(.$Group) %>%
map(logistic_model)
logistic_model <- function(x){
model <- nlme::nlme(resp1 ~ 7/(1+exp(-scal*(step-xmid))),
data = x,
fixed = xmid + scal ~ 1,
random = xmid + scal ~ 1|ID,
start = c(xmid = 3.4, scal = .7))
coef(model)
}
install.packages("nlme")
logistic_model <- function(x){
model <- nlme::nlme(resp1 ~ 7/(1+exp(-scal*(step-xmid))),
data = x,
fixed = xmid + scal ~ 1,
random = xmid + scal ~ 1|ID,
start = c(xmid = 3.4, scal = .7))
coef(model)
}
# split by even/odd trials and fit model, extract random effect coefficients
coefs_whoosh <- whoosh_half %>%
split(.$Group) %>%
map(logistic_model)
View(coefs_whoosh)
View(whoosh_half)
whoosh_half <- whooshdata %>%
group_by(ID, step, bias) %>%
mutate(trial_number = row_number()) %>%
mutate(Group = ifelse(trial_number %% 2 == 0, "even", "odd"))
# Subset to session 1 PC data
whooshdata <- subset(PC.both.complete,session=="Session 1")
whoosh_half <- whooshdata %>%
group_by(ID, step, bias) %>%
mutate(trial_number = row_number()) %>%
mutate(Group = ifelse(trial_number %% 2 == 0, "even", "odd"))
View(whoosh_half)
xmid()
?xmid
scak
scal()
# Subset to session 1 PC data
whooshdata <- subset(PC.both.complete,session=="Session 1")
View(whooshdata)
# Subset to session 1 PC data
whooshdata <- subset(PC.both.complete,session=="Session 1")
whoosh_sbias <- whooshdata %>%
subset(whooshdata,bias=="S-Bias") %>%
group_by(ID, step) %>%
mutate(trial_number = row_number()) %>%
mutate(Group = ifelse(trial_number %% 2 == 0, "even", "odd"))
whoosh_sbias <- whooshdata %>%
filter(bias=="S-Bias") %>%
group_by(ID, step) %>%
mutate(trial_number = row_number()) %>%
mutate(Group = ifelse(trial_number %% 2 == 0, "even", "odd"))
View(whoosh_sbias)
# Subset to session 1 PC data
whooshdata <- subset(PC.both.complete,session=="Session 1")
whoosh_sbias <- whooshdata %>%
filter(bias=="S-Bias") %>%
group_by(ID, step) %>%
mutate(Group = ifelse(trial_number %% 2 == 0, "even", "odd"))
View(whoosh_sbias)
whoosh_sbias <- whooshdata %>%
filter(bias=="S-Bias") %>%
group_by(ID, step) %>%
mutate(new_trial_number = row_number()) %>%
mutate(Group = ifelse(trial_number %% 2 == 0, "even", "odd"))
View(whoosh_sbias)
whoosh_sbias <- whooshdata %>%
filter(bias=="S-Bias") %>%
group_by(ID, step) %>%
mutate(new_trial_number = row_number()) %>%
mutate(Group = ifelse(new_trial_number %% 2 == 0, "even", "odd"))
View(whoosh_sbias)
View(whooshdata)
whoosh_shbias <- whooshdata %>%
filter(bias=="SH-Bias") %>%
group_by(ID, step) %>%
mutate(new_trial_number = row_number()) %>%
mutate(Group = ifelse(new_trial_number %% 2 == 0, "even", "odd"))
View(whoosh_shbias)
logistic_model <- function(x){
model <- nlme::nlme(resp1 ~ 7/(1+exp(-scal*(step-xmid))),
data = x,
fixed = xmid + scal ~ 1,
random = xmid + scal ~ 1|ID,
start = c(xmid = 3.4, scal = .7))
coef(model)
}
# split by even/odd trials and fit model, extract random effect coefficients
coefs_sbias<- whoosh_sbias %>%
split(.$Group) %>%
map(logistic_model)
coefs_shbias<- whoosh_shbias %>%
split(.$Group) %>%
map(logistic_model)
# correlation tests for slopes to see if participants' slopes are consistent within
# a continuum for odd/even trials
cor.test(coefs_sbias[[1]]$scal, coefs_sbias[[2]]$scal) # bada within-participant consistency
cor.test(coefs_shbias[[1]]$scal, coefs_shbias[[2]]$scal) # sh-bias within-participant consistency
# correlation tests for slopes to see if participants' slopes are correlated
# with their slopes from the other biasing condition (all combinations of even/odd trials)
cor.test(coefs_sbias[[1]]$scal, coefs_shbias[[1]]$scal) # s-bias even/sh-bias even
cor.test(coefs_sbias[[2]]$scal, coefs_shbias[[2]]$scal) # s-bias odd/sh-bias odd
cor.test(coefs_sbias[[1]]$scal, coefs_shbias[[2]]$scal) # s-bias even/sh-bias odd
cor.test(coefs_sbias[[2]]$scal, coefs_shbias[[1]]$scal) # s-bias odd/sh-bias even
# Subset to session 1 PC data
whooshdata <- subset(PC.both.complete,session=="Session 1")
save(whooshdata,file="whooshdata.Rdata")
load("C:/Users/David/Desktop/whooshdata_DIS.Rdata")
source('C:/Users/David/Desktop/whoosh_DIS.R', echo=TRUE)
# Subset to session 1 PC data
whooshdata <- subset(PC.both.complete,session=="Session 1")
whoosh_sbias <- whooshdata %>%
filter(bias=="S-Bias") %>%
group_by(ID, step) %>%
mutate(new_trial_number = row_number()) %>%
mutate(Group = ifelse(new_trial_number %% 2 == 0, "even", "odd"))
whoosh_shbias <- whooshdata %>%
filter(bias=="SH-Bias") %>%
group_by(ID, step) %>%
mutate(new_trial_number = row_number()) %>%
mutate(Group = ifelse(new_trial_number %% 2 == 0, "even", "odd"))
logistic_model <- function(x){
model <- nlme::nlme(resp1 ~ 7/(1+exp(-scal*(step-xmid))),
data = x,
fixed = xmid + scal ~ 1,
random = xmid + scal ~ 1|ID,
start = c(xmid = 3.4, scal = .7))
coef(model)
}
# split by even/odd trials and fit model, extract random effect coefficients
coefs_sbias<- whoosh_sbias %>%
split(.$Group) %>%
map(logistic_model)
coefs_shbias<- whoosh_shbias %>%
split(.$Group) %>%
map(logistic_model)
# correlation tests for slopes to see if participants' slopes are consistent within
# a continuum for odd/even trials
cor.test(coefs_sbias[[1]]$scal, coefs_sbias[[2]]$scal) # s-bias within-participant consistency
cor.test(coefs_shbias[[1]]$scal, coefs_shbias[[2]]$scal) # sh-bias within-participant consistency
# correlation tests for slopes to see if participants' slopes are correlated
# with their slopes from the other biasing condition (all combinations of even/odd trials)
cor.test(coefs_sbias[[1]]$scal, coefs_shbias[[1]]$scal) # s-bias even/sh-bias even
cor.test(coefs_sbias[[2]]$scal, coefs_shbias[[2]]$scal) # s-bias odd/sh-bias odd
cor.test(coefs_sbias[[1]]$scal, coefs_shbias[[2]]$scal) # s-bias even/sh-bias odd
cor.test(coefs_sbias[[2]]$scal, coefs_shbias[[1]]$scal) # s-bias odd/sh-bias even
